{
	"info": {
		"_postman_id": "a23bb30c-40df-4298-9c0b-018d0317aca6",
		"name": "Stuf Component",
		"description": "API Details\n- Component: Stuf component\n- Reference: stuf\n- Enviroment: dev\n- Version: V.0.1\n- Repository: [online](https://github.com/ConductionNL/stufservice) / [zip](https://github.com/ConductionNL/stufservice/archive/master.zip)\n- Docker Image: [online](https://hub.docker.com/repository/docker/conduction/stuf-php) \n- Datamodel: [postman](/schema/stuf.postman_collection.json) / [oas](/schema/openapi.yaml) / [pdf](/schema/datamodel.pdf) / [modelio (zip)](/schema/Datamodel_Modelio.zip) \n\n'Naast deze JSON rest API is er ook een [graphql](/graphql) interface beschikbaar.'         \n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3fa271c0-7e96-419b-a517-26333c40db31",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"// example using pm.response.to.be*\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     // assert that the status code is 200\r",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
							"     // assert that the response has a valid JSON body\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
							"});\r",
							"pm.test(\"status must be 'pass'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData);\r",
							"    //var payloadData = JSON.parse(jsonData.Payload); //parsed payload\r",
							"\r",
							"    //console.log(payloadData.Id);\r",
							"    pm.expect(jsonData.status).to.equal('pass');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/health+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{authorization}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "168e30df-5463-4bb6-8bdd-96eb690f1e2f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6cdb0fd6-6dd0-4ee4-a95d-591ffb9cdb23",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f7ba08a2-6420-4b26-8e62-5596994d75e2",
			"key": "baseUrl",
			"value": "https://stuf.dev.zuid-drecht.nl"
		},
		{
			"id": "c8f00eb7-3c1f-4642-b18e-c73e60ab5075",
			"key": "authorization",
			"value": "45c1a4b6-59d3-4a6e-86bf-88a872f35845"
		}
	],
	"protocolProfileBehavior": {}
}